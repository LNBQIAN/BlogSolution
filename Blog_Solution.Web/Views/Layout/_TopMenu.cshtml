@using Abp.Collections.Extensions
@using Blog_Solution.Web.Views
@model Blog_Solution.Web.Models.Layout.TopMenuViewModel
@{
    var calculateMenuUrl = new Func<string, string>((url) =>
    {
        if (string.IsNullOrEmpty(url))
        {
            return ApplicationPath;
        }

        if (UrlChecker.IsRooted(url))
        {
            return url;
        }

        return ApplicationPath + url;
    });
}


@helper RenderMenuItem(Abp.Application.Navigation.UserMenuItem item)
{
var isActive = Model.ActiveMenuItemName == item.Name;
if (!String.IsNullOrEmpty(item.Url))
{
        <li @(isActive ? Html.Raw("class=\"active current-active-item\"") : null)>
            <a href="@item.Url" class="menu-item-link">
                @if (!String.IsNullOrEmpty(item.Icon))
                {
                    <text>
                        <i class="fa @Url.Content(item.Icon)"></i>
                    </text>
                }
                <span class="menu-item-title">@L(item.Name)</span>
            </a>
        </li>
}
else
{
        <li class="treeview @(isActive ? Html.Raw("active current-active-item") : null)">
            <a href="#">
                @if (!String.IsNullOrEmpty(item.Icon))
                {
                    <text>
                        <i class="fa @Url.Content(item.Icon)"></i>
                    </text>
                }
                <span>@L(item.Name)</span>
                <i class="fa fa-angle-left pull-right"></i>
            </a>

            @if (item.Items.Any())
            {
                <ul class="treeview-menu">
                    @foreach (var childItem in item.Items)
                    {
                        @RenderMenuItem(childItem)
                    }
                </ul>
            }
        </li>
}
}
<ul class="sidebar-menu">

    @foreach (var item in Model.MainMenu.Items)
    {
        @RenderMenuItem(item)
    }
</ul>

